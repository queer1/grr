// Copyright 2011 Google Inc. All Rights Reserved

// These are the messages used in GRR
syntax = "proto2";

import "grr/proto/semantic.proto";



message HttpRequest {
  optional string raw_headers = 1;
  optional string user_agent = 2;
  optional string source_ip = 3;
  optional string url = 4;
  optional string user = 5 [default = "anonymous"];
  optional uint64 timestamp = 6 [(sem_type) = {
      type: "RDFDatetime",
      description: "Timestamp: unique identifier for the request",
    }];
  optional string method = 7 [default = "GET"];  // Method e.g. GET/POST/PUT
  optional string referrer = 8;
  optional uint64 size = 9 [(sem_type) = {
      description: "Size of the request in bytes",
    }];
}

// This message is sent between the client and the server.
message GrrMessage {
  optional string session_id = 1 [(sem_type) = {
      type: "FlowSessionID",
      description: "The session id of the flow that this message belongs to."
    }];

  optional uint64 request_id = 2 [(sem_type) = {
      description: "The message is in response to this request number "
      "(requests increment from 1)."
    }];

  optional uint64 response_id = 3 [(sem_type) = {
      description: "Responses for each request are also numbered from 1."
    }];

  optional string name = 4 [(sem_type) = {
      description: "This is the name of the client action that will be "
      "executed. It is set by the flow and is executed by the client."
    }];

  // This field contains an encoded rdfvalue.
  optional bytes args = 5;

  // Due to superceed the args field (not yet implemented). Contains the
  // arguement to the client action, or the response from the client action.
  optional EmbeddedRDFValue arg = 20;

  optional string source = 6  [(sem_type) = {
      type: "RDFURN",
      description: "Client name where the message came from "
      "(Filled in by the frontend)."
    }];

  // A Flag to indicate if the message is authenticated. Note that the client
  // does not get to decide this - the_server will verify the message and tag it
  // as such. The message is then passed down the chain of components carrying
  // this tag.

  // This is done because signing is done on a group of messages as they arrive
  // over the POST, but after decryption and unpacking, messages are queued
  // individually and therefore need to retain their authenticated status.
  enum AuthorizationState {
    UNAUTHENTICATED = 0;
    AUTHENTICATED = 1;

    // This indicates that clocks are out of sync and this message may be a
    // replay.
    DESYNCHRONIZED = 2;
  };

  optional AuthorizationState auth_state = 7 [ default = UNAUTHENTICATED ];

  enum Type {
    MESSAGE = 0;
    STATUS = 1;
    ITERATOR = 2;
  };

  // The final response to a request carries this type which indicates it is a
  // status message.
  optional Type type = 8 [ default = MESSAGE ];

  enum Priority {
    LOW_PRIORITY = 0;
    MEDIUM_PRIORITY = 1;
    HIGH_PRIORITY = 2;
  };

  optional Priority priority = 9 [ default = MEDIUM_PRIORITY, (sem_type) = {
      description: "The priority of this message - allows higher priority "
      "messages to leap to the front of queues."
    }];

  optional uint32 ttl = 10 [default = 10, (sem_type) = {
      description: "Time to live - each time a request is retransmitted this "
      "decrement until it expires."
    }];

  optional bool require_fastpoll = 11 [ default = true, (sem_type) = {
      description: "If this is true, the client will enter fast poll mode "
      "after processing."
    }];

  optional float cpu_limit = 12 [ default = 3600, (sem_type) = {
      description: "Maximum number of CPU seconds to be used by this action."
    }];

  optional uint64 args_age = 13 [(sem_type) = {
      type: "RDFDatetime",
      description: "The age of the args rdfvalue.",
    }];

  // The rdfvalue class of the args.
  optional string args_rdf_name = 14;

  // The id of this message in the scheduler.
  optional uint64 task_id = 15;

  // The ttl used in the task scheduler.
  optional int32 task_ttl = 16 [ default = 5 ];
  optional string queue = 17  [(sem_type) = {
      // TODO(user) This should be changed to a RDFURN.
      description: "The scheduler queue this message is in."
    }];

  // The time when this message is becoming available for leasing.
  optional uint64 eta = 18;

  // Human readable info about the last process leasing this message.
  optional string last_lease = 19;

  optional uint64 network_bytes_limit = 21 [ default = 10737418240,
      (sem_type) = {
      description: "Maximum number of network bytes to be sent, 10G default. "
                   "All bytes charged against the flow session ID count "
                   "towards the limit but only during TransferBuffer is the "
                   "limit enforced. This means we can blockfile transfers but "
                   "still communicate after the limit is reached."
    }];

};

// This is a list of messages
message MessageList {
  repeated GrrMessage job = 1;
};

// This is the protobuf which is transmitted on the wire
message SignedMessageList {
  enum CompressionType {
    UNCOMPRESSED = 0;
    // Compressed using the zlib.compress() function.
    ZCOMPRESSION = 1;
  };

  // This is a serialized MessageList for signing
  optional bytes message_list = 1;

  // BEGIN DEPRECATED
  optional bytes signature = 2;
  // END DEPRECATED

  optional string source = 3 [(sem_type) = {
      type: "RDFURN",
      description: "The source where this message came from."
    }];

  // How the message_list element is compressed
  optional CompressionType compression = 4 [ default = UNCOMPRESSED ];
  optional uint64 timestamp = 6 [(sem_type) = {
      type: "RDFDatetime",
      description: "The client sends its timestamp to prevent replay attacks."
    }];
};

message CipherProperties {
  required string name = 1;

  required bytes key = 2;

  // This is used to encrypt the cipher metadata block.
  optional bytes iv = 3;

  // The key used for the hmac.
  optional bytes hmac_key = 5;
};

message CipherMetadata {
  optional string source = 1 [(sem_type) = {
      type: "RDFURN",
      description: "The common name this cipher should be used to communicate with."
    }];

  // The signature of the encrypted cipher block.
  optional bytes signature = 2;
};

message ClientCommunication {
  optional bytes encrypted = 1;

  // This is a CipherProperties protobuf encrypted with the public key of the
  // receiver.
  optional bytes encrypted_cipher = 2;
  optional bytes encrypted_cipher_metadata = 9;

  // This iv is used to encrypt the encrypted field.
  optional bytes iv = 8;

  optional HttpRequest orig_request = 3;

  // The number of messages waiting on the input queue. The client
  // fills this in so the server can limit the number of messages
  // issued to the client as a means of throttling it.
  optional uint32 queue_size = 4 [default = 0];

  // This status code applies for the entire communication.
  enum Status {
    OK = 200;
    BAD_REQUEST = 400;
    CIPHER_ERROR = 406;
  };
  optional Status status = 5 [default = OK];

  optional uint32 api_version = 6;

  // Protocol Version >= 3: This field contains the hmac of the message with the
  // cipher key.
  optional bytes hmac = 7;
};

// This is a status response that is sent for each complete
// transaction. It is always the last message in the transaction.
message GrrStatus {
  enum ReturnedStatus {
    OK = 0;
    IOERROR = 1;
    RETRANSMISSION_DETECTED = 2;
    CLIENT_KILLED = 3;
    NETWORK_LIMIT_EXCEEDED = 4;

    GENERIC_ERROR = 10;
  };

  optional ReturnedStatus status = 1 [default = OK];

  optional string error_message = 2 [default = ""];

  optional string backtrace = 3 [default = ""];

  optional CpuSeconds cpu_time_used = 4;

  optional string child_session_id = 5 [(sem_type) = {
      type: "SessionID",
      description: "The URN of a subflow.",
    }];

  optional uint64 network_bytes_sent = 6;

  optional string nanny_status = 7;
};

message ClientCrash {
  optional string client_id = 1 [(sem_type) = {
      type: "ClientURN"
    }];
  optional string session_id = 2 [(sem_type) = {
      type: "SessionID"
    }];
  optional ClientInformation client_info = 3;

  optional uint64 timestamp = 4 [(sem_type) = {
      type: "RDFDatetime",
      description: "When the client crashed."
    }];
  optional string crash_type = 5 [(sem_type) = {
      type: "SessionID"
    }];
  optional string crash_message = 6;
  optional string backtrace = 7;
}

message HuntNotification {
  optional string session_id = 1 [(sem_type) = {
      type: "SessionID"
    }];
  optional string client_id = 2 [(sem_type) = {
      type: "ClientURN"
    }];

  enum Status {
    UNKNOWN = 0;
    OK = 1;
    ERROR = 2;
    BAD = 3;
  }
  optional Status status = 3;
}

message FlowNotification {
  optional string session_id = 1 [(sem_type) = {
      type: "SessionID"
    }];
  optional string flow_name = 2;
  optional string client_id = 3 [(sem_type) = {
      type: "ClientURN"
    }];
  enum Status {
    UNKNOWN = 0;
    OK = 1;
    ERROR = 2;
  }
  optional Status status = 4;
}

// Stores information about the GRR client itself
message ClientInformation {
  optional string client_name = 1;
  optional uint32 client_version = 2;
  optional uint64 revision = 3;
  optional string build_time = 4;
  optional string client_description = 5;
}

// This is used to store a task in task scheduler
// DEPRECATED. The task scheduler now directly supports GRRMessages.
message Task {
  optional uint64 id = 1;
  optional bytes value = 2;

  // Number of retransmission before the task is discarded. Note this is a low
  // level task scheduler parameter which is not related to the
  // RequestState.transmission_count. A task will be retransmitted automatically
  // even if the worker does not process it.
  optional int32 ttl = 3 [ default = 5 ];
  optional uint64 eta = 4;
  optional string queue = 5;
  optional GrrMessage.Priority priority = 6 [ default = MEDIUM_PRIORITY ];
  optional string last_lease = 7;
};

// A generic protobuf to deliver some data
// The data can be a single value a protobuf or a list.
message DataBlob {
  optional int64 integer = 1;
  optional bytes data = 2;
  optional string string = 3;
  optional string proto_name = 4;   // If set data contains proto
  optional string none = 5; // If set data contains None
  optional bool boolean = 6; // If set data contains a boolean value
  optional BlobArray list = 8;  // For storing lists.
  optional Dict dict = 9; // Stores a dictionary
  optional EmbeddedRDFValue rdf_value = 10 [(sem_type) = {
      description: "Store an embedded arbitrary RDFValue."
    }];
  optional float float = 11;

  enum CompressionType {
    UNCOMPRESSED = 0;
    // Compressed using the zlib.compress() function.
    ZCOMPRESSION = 1;
  };

  // How the message_list element is compressed
  optional CompressionType compression = 7 [ default = UNCOMPRESSED ];
};

// A generic collection of blobs
message BlobArray {
  repeated DataBlob content = 1;
};

// This is a log message sent from the client to the server logging subsystem.
message PrintStr {
  optional int32 level = 1 [ default = 10 ];
  optional string data = 2;
};

// CopyPathToFile request and response.
// Request:
//  - offset: byte offset inside src file to start copying from
//  - length: total number of bytes to copy (default 0 will copy whole file)
//  - block_size: how many bytes to copy at a time (default 10 MB)
//  - src_path: source pathspec to copy from
//  - dest_dir: destination directory to copy to
//  - dest_path: unset (GRRTempfile will create a random filename in dest_dir)
//  - gzip_output: if true, output file will be gzipped (default true)
//  - lifetime: number of seconds the file will stay on disk before being
//  deleted (default of 0 means don't delete)
//
// Response:
//  - offset: byte offset from request
//  - length: total bytes copied
//  - block_size: unused
//  - src_path: source pathspec from request
//  - dest_dir: destination dir from request
//  - dest_path: on-disk output pathspec
//  - gzip_output: if true, output file is gzipped
//  - lifetime: unused
//
message CopyPathToFile {
  optional uint64 offset = 1 [ default = 0 ];
  optional uint64 length = 2 [ default = 0 ];
  optional PathSpec src_path = 3;
  optional string dest_dir = 4;
  optional PathSpec dest_path = 5;
  optional bool gzip_output = 6 [ default = true ];
  optional float lifetime = 7 [ default = 0 ];
};

// Pass a buffer back.

//   This protobuf is used for both the request and response.

//   During the request:
//     - pathspec will be set to the desired file to read
//     - offset, length specify the requested region
//     - callback specifies the plugin to be called with the result on
//       the server.

//   During the response:
//     - data is set to the buffer read
//     - offset, length indicate the actual buffer returned (e.g. in
//       case of truncated buffers).

message BufferReference {
  optional uint64 offset = 1 [ default = 0 ];
  optional uint64 length = 2 [ default = 0 ];
  optional string callback = 3;
  optional bytes  data = 4;
  optional PathSpec pathspec = 6;
};

// Information for each request. Note that we are keeping all the
// messages in a list until we receive the final Status message - when
// we process them all. This allows us to roll back the transaction in
// case the status is invalid.
message RequestState {
  // The number of this request (starts in 1).
  required uint32 id = 1;

  // The task scheduler ID corresponding to the message from this request.
  optional uint64 ts_id = 2;
  optional string next_state = 3;
  optional GrrStatus status = 4;

  optional Dict data = 5 [(sem_type) = {
      description: "This can contain any data we want to associate with the "
      "request.",
    }];

  // Responses are kept in the datastore now. This just tells us the
  // total number of responses we have for this request.
  optional uint32 response_count = 6 [default = 0];

  // A count of request retransmits
  optional uint32 transmission_count = 7 [default = 0];

  optional string client_id = 8  [(sem_type) = {
      type: "ClientURN",
      description: "The client id where the request was heading - we only receive"
      "responses from this client."
    }];
  optional string session_id = 9 [(sem_type) = {
      type: "SessionID",
      description: "This is the session_id of the flow this request belongs to."
    }];

  // The original message request.
  optional GrrMessage request = 10;

  optional string flow_name = 11;
};

// Flows are pickled in the data store:
message Flow {
  optional string name = 1;
  optional bytes pickle = 2;
  optional uint64 ts_id = 3;
  enum State {
    RUNNING = 0;
    TERMINATED = 1;
    ERROR = 3;   // Flows which raise are marked as having an error.

    // A well known flow will not queue any messages and always
    // forward messages to the worker:
    WELL_KNOWN = 2;
  };

  optional State state = 4 [default = RUNNING];
  optional string session_id = 5  [(sem_type) = {
      type: "SessionID"
    }];

  // The number of outstanding requests in this flow
  optional uint32 outstanding_requests = 6 [default = 0];

  optional string creator = 7;

  optional string backtrace = 8 [(sem_type) = {
      type: "RDFString",
      description: "Flows terminated with an error include this backtrace.",
    }];

  optional uint64 create_time = 9 [default = 0, (sem_type) = {
      type: "RDFDatetime",
      description: "When this flow was created.",
    }];

  // A progress indicator from 0-100.
  optional int32 progress = 10 [default = 0];

  // Dict of arguments passed to the flow.
  optional Dict args = 11;

  // Event ID - unique id for user initiated event.
  optional string event_id = 12;

  // RequestState - Only populated in child flows
  optional RequestState request_state = 14;

  // A helpful status message that can be set by flows to track their progress.
  optional string status = 15;

  // The children of this flow.
  repeated string children = 16;

  // The client id for this flow.
  optional string client_id = 17 [(sem_type) = {
      type: "ClientURN"
    }];

  // The cpu seconds used on the client to complete this flow.
  optional CpuSeconds cpu_used = 18;

  // The bandwidth used for this flow.
  optional uint64 network_bytes_sent = 19;

  // The priority of this flow.
  optional GrrMessage.Priority priority = 20;

};

message CpuSeconds {
  optional float user_cpu_time = 1;
  optional float system_cpu_time = 2;
}

message CpuSample {
  optional float user_cpu_time = 1;
  optional float system_cpu_time = 2;
  optional float cpu_percent = 3;
  optional uint64 timestamp = 4 [(sem_type) = {
      type: "RDFDatetime",
      description: "The time of this sample."
    }];
}

message IOSample {
  optional uint64 read_count = 1;
  optional uint64 write_count = 2;
  optional uint64 read_bytes = 3;
  optional uint64 write_bytes = 4;
  optional uint64 timestamp = 5 [(sem_type) = {
      type: "RDFDatetime",
      description: "The time of this sample."
    }];
}

message ClientStats {
  repeated CpuSample cpu_samples = 1;
  optional uint64 RSS_size = 2;
  optional uint64 VMS_size = 3;
  optional float memory_percent = 4;
  optional uint64 bytes_received = 5;
  optional uint64 bytes_sent = 6;
  repeated IOSample io_samples = 7;
  optional uint64 create_time = 8;
  optional uint64 boot_time = 9;
}

message StartupInfo {
  optional ClientInformation client_info = 1;
  optional uint64 boot_time = 2;
}

message ExecuteRequest {
  optional string cmd = 1;
  repeated string args = 2;
  // An execution time limit, given in seconds.
  optional int32 time_limit = 3;
}

message ExecuteResponse {
  optional ExecuteRequest request = 1;
  optional int32 exit_status = 2;
  optional bytes stdout = 3;
  optional bytes stderr = 4;
  // The time used to execute the cmd, given in microseconds.
  optional int32 time_used = 5;
}

// A message to encode a filesystem path (maybe for raw access)
message PathSpec {
  enum PathType {
    UNSET = -1;
    OS = 0;
    TSK = 1;
    REGISTRY = 2;
    MEMORY = 3;
  };
  optional PathType pathtype = 1 [default = UNSET];

  optional string path = 2;

  optional string stream_name = 11 [(sem_type) = {
      description: "A name for the data stream. For example, an ADS name."
    }];

  optional string mount_point = 3;
  optional PathSpec nested_path = 5;

  // Offset for split images
  optional uint64 offset = 6;

  enum Options {
    CASE_INSENSITIVE = 0;
    CASE_LITERAL = 1;
  };
  optional Options path_options = 7 [default = CASE_INSENSITIVE];

  // On NTFS, the sleuthkit uses the inode, type and id to uniquely identify a
  // file - instead of the path.
  optional uint64 inode = 8;

  enum tsk_fs_attr_type {

    TSK_FS_ATTR_TYPE_DEFAULT = 0x01;        // 1
    TSK_FS_ATTR_TYPE_NTFS_SI = 0x10;        // 16
    TSK_FS_ATTR_TYPE_NTFS_ATTRLIST = 0x20;  // 32
    TSK_FS_ATTR_TYPE_NTFS_FNAME = 0x30;     // 48
    TSK_FS_ATTR_TYPE_NTFS_VVER = 0x40;      // 64 (NT)
    TSK_FS_ATTR_TYPE_NTFS_OBJID = 0x40;     // 64 (2K)
    TSK_FS_ATTR_TYPE_NTFS_SEC = 0x50;       // 80
    TSK_FS_ATTR_TYPE_NTFS_VNAME = 0x60;     // 96
    TSK_FS_ATTR_TYPE_NTFS_VINFO = 0x70;     // 112
    TSK_FS_ATTR_TYPE_NTFS_DATA = 0x80;      // 128
    TSK_FS_ATTR_TYPE_NTFS_IDXROOT = 0x90;   // 144
    TSK_FS_ATTR_TYPE_NTFS_IDXALLOC = 0xA0;  // 160
    TSK_FS_ATTR_TYPE_NTFS_BITMAP = 0xB0;    // 176
    TSK_FS_ATTR_TYPE_NTFS_SYMLNK = 0xC0;    // 192 (NT)
    TSK_FS_ATTR_TYPE_NTFS_REPARSE = 0xC0;   // 192 (2K)
    TSK_FS_ATTR_TYPE_NTFS_EAINFO = 0xD0;    // 208
    TSK_FS_ATTR_TYPE_NTFS_EA = 0xE0;        // 224
    TSK_FS_ATTR_TYPE_NTFS_PROP = 0xF0;      // (NT)
    TSK_FS_ATTR_TYPE_NTFS_LOG = 0x100;      // (2K)
    TSK_FS_ATTR_TYPE_UNIX_INDIR = 0x1001;   // Indirect blocks for UFS and ExtX
  };

  optional tsk_fs_attr_type ntfs_type = 9 [default = TSK_FS_ATTR_TYPE_DEFAULT];
  optional uint64 ntfs_id = 10;
};

// Ask the ListDir action to list all files in path (returns StatEntry)
message ListDirRequest {
  optional PathSpec pathspec = 1;
  optional Iterator iterator = 2;
};

// A stat() record for a given path
message StatEntry {
  // This contains the URN of the aff4 object represented by this protobuf.
  optional string aff4path = 1[(sem_type) = {
      type: "RDFURN",
      description: "The location of this file in the AFF4 space."
    }];
  optional uint32 st_mode = 2 [(sem_type) = {
      type: "StatMode",
      description: "A unix file permission mode."
    }];

  optional uint32 st_ino = 3;
  optional uint32 st_dev = 4;
  optional uint32 st_nlink = 5;
  optional uint32 st_uid = 6;
  optional uint32 st_gid = 7;
  optional uint64 st_size = 8;
  optional uint64 st_atime = 9 [(sem_type) = {
      type: "RDFDatetimeSeconds",
      description: "Last access time."
    }];

  optional uint64 st_mtime = 10 [(sem_type) = {
      type: "RDFDatetimeSeconds",
      description: "Last modified time."
    }];

  optional uint64 st_ctime = 11 [(sem_type) = {
      type: "RDFDatetimeSeconds",
      description: "Last inode change time."
    }];

  optional uint32 st_blocks = 12;
  optional uint32 st_blksize = 13;
  optional uint32 st_rdev = 14;
  optional string symlink = 15;

  // These are used when mapping registry keys to the VFS
  enum RegistryType {

    REG_NONE = 0x00;
    REG_SZ = 0x01;
    REG_EXPAND_SZ = 0x02;
    REG_BINARY = 0x03;
    REG_DWORD = 0x04;
    REG_DWORD_LITTLE_ENDIAN = 0x04;
    REG_DWORD_BIG_ENDIAN = 0x05;
    REG_LINK = 0x06;
    REG_MULTI_SZ = 0x07;
    REG_QWORD = 0x0B;
  }

  optional RegistryType registry_type = 16 [(sem_type) = {
      description: "If this is a stat of a registry value, this field "
      "contains the type of this value. The content will also be encoded "
      "in residet."
    }];

 // For very small files their data is stored in this record.
  optional bytes resident = 17;

  // The pathspec which the client can use to re-reach this file.
  optional PathSpec pathspec = 18 [(sem_type) = {
      description: "The path specification to this file on the client."
    }];

  optional DataBlob registry_data = 19 [(sem_type) = {
      description: "If this entry represents a registry value, this field will "
      "contain that value encoded according to the correct type.";
    }];
};

// This stores collection entries.
message Collection {
  repeated StatEntry items = 1;
};


// Windows WMI Request.
message WmiRequest {
  optional string query = 1;
};

// A Key Value pair
message KeyValue {
  optional DataBlob k = 1;
  optional DataBlob v = 2;
};

// A list of Key Value pairs
message Dict {
  repeated KeyValue dat = 1;
};


// Certificates are exchanged with this.
message Certificate {
  enum Type {
    CSR = 0;
    CRT = 1;
    CA  = 2;
  };

  optional Type type = 1;
  optional bytes pem = 2;
  optional string cn = 3;
};

// Message to carry uname information.
message Uname {
  optional string system = 1;
  optional string node = 2;
  optional string release = 3;
  optional string version = 4;
  optional string machine = 5;
  optional string kernel = 6;
  optional string fqdn = 7;
};

message FolderInformation {
  optional string app_data = 1;
  optional string cache = 2;
  optional string cookies = 3;
  optional string desktop = 4;
  optional string favorites = 5;
  optional string history = 6;
  optional string local_app_data = 7;
  optional string local_settings = 8;
  optional string my_music = 9;
  optional string my_pictures = 10;
  optional string my_video = 11;
  optional string net_hood = 12;
  optional string personal = 13;
  optional string print_hood = 14;
  optional string programs = 15;
  optional string recent = 16;
  optional string send_to = 17;
  optional string start_menu = 18;
  optional string startup = 19;
  optional string templates = 20;
};

// User account information.
message UserAccount {
  optional string username = 1;
  optional string full_name = 2;
  optional string comment = 3;
  optional uint64 last_logon = 4 [(sem_type) = {
      type: "RDFDatetime",
      description: "The last logon time for this user."
    }];
  optional string domain = 5;
  optional string homedir = 6;
  optional string sid = 7;
  optional FolderInformation special_folders = 8;
};

// A protobuf to encode network addresses.
message NetworkAddress {
  enum Family {
    INET = 0;
    INET6 = 1;
  }
  optional Family address_type = 1;
  optional string human_readable = 2;
  optional bytes packed_bytes = 3;
};

// Information about a network interface.
message Interface {
  optional bytes mac_address = 1;
  // ip4_addresses is deprecated, use addresses.
  repeated bytes ip4_addresses = 2;
  optional string ifname = 3;
  // ip6_addresses is deprecated, use addresses.
  repeated bytes ip6_addresses = 4;
  repeated NetworkAddress addresses = 5;
};


// This returns information about the memory geometry.
message MemoryInformation {
  optional PathSpec device = 1;
  repeated BufferReference runs = 2;
  optional uint64 cr3 = 3;
}


// Updates the client configuration. We deliberately only allow to update a few
// options. Setting these should take effect immediately.

// This message is deprecated ... Client configuration is now set via an
// RDFProtoDict. Those fields which are allowed to be modified remotely are
// described in their TypeInfo description.
message GRRConfig {
  optional int32 foreman_check_frequency = 1;
  optional string location = 2;
  optional int32 max_post_size = 3;
  optional int32 max_out_queue = 4;
  optional float poll_min = 5;
  optional float poll_max = 6;
  optional float poll_slew = 7;
  optional string compression = 8;
  optional bool verbose = 9;

  // These options can be read but not modified.
  optional string camode = 10;
  optional int32 server_serial_number = 11;
  optional string regpath = 12;
  optional string config = 13;
  optional bool debug = 14;
  optional bool process_separate = 15;   // deprecated
  optional float rss_max = 16;
};


message AuthenticodeSignedData {
  optional uint64 revision = 1;
  optional uint64 cert_type = 2;
  optional bytes certificate = 3;
}


message FingerprintTuple {
  // The fingerprinting methods the fingerprinter can be asked to perform.
  // If none is given, all are applied.
  enum Type {
    FPT_GENERIC = 0;
    FPT_PE_COFF = 1;
  };
  // The hash functions that a fingerprinting method may employ.
  // If none is given, all applicable ones are used.
  enum Hash {
    MD5 = 0;
    SHA1 = 1;
    SHA256 = 2;
  };
  required Type fp_type = 1;
  repeated Hash hashers = 2;
};

// Request fingerprints for a file.
message FingerprintRequest {
  optional PathSpec pathspec = 1;
  repeated FingerprintTuple tuples = 2;
};

// Response data for file hashes and signature blobs.
message FingerprintResponse {
  repeated FingerprintTuple.Type matching_types = 1;
  repeated Dict results = 2;
  optional PathSpec pathspec = 3;
};

// Specialized binary blob for client.
message SignedBlob {
  enum HashType {
    MD5 = 0;
    SHA1 = 1;
    SHA256 = 2;
  };
  enum SignatureType {
    RSA_2048 = 0;
  }
  optional bytes data = 1;   // The blob itself.
  optional bytes digest = 2;   // The hash of the blob.
  optional HashType digest_type = 3;  // The type of hash used.
  optional bytes signature = 4;     // Signature for the digest.
  optional SignatureType signature_type = 5;  //Type of the signature.
}

// Message containing request to execute python in the context of the client.
message ExecutePythonRequest {
  optional SignedBlob python_code = 1;
  optional Dict py_args = 2;
}

// Message containing response from ExecutePythonRequest.
message ExecutePythonResponse {
  optional bytes return_val = 1;
  optional int32 time_used = 2;
}

// Issue a request for volatility memory analysis.
message VolatilityRequest {
  optional Dict args = 1;

  // We can run several plugins in one request.
  repeated string plugins = 2;

  // The profile name to use. Defaults to autoguessing on the client.
  optional string profile = 3;

  // The raw device to use.
  optional PathSpec device = 4;

  // These parameters are used to initialize the session.
  optional Dict session = 5;
}

message VolatilityHeader {
  optional string print_name = 1;
  optional string name = 2;
  optional string format_hint = 3;
}

message VolatilityValue {
  optional string type = 1;
  optional string name = 2;
  optional int64 offset = 3;
  optional string vm = 4;
  optional int64 value = 5;
  optional string svalue = 6;
  optional string reason = 7;
}

message VolatilityValues {
  repeated VolatilityValue values = 1;
}

message VolatilityTable {
  repeated VolatilityHeader headers = 1;
  repeated VolatilityValues rows = 2;
}

message VolatilityFormattedValue {
  optional string formatstring = 1;
  optional VolatilityValues data = 2;
}

message VolatilityFormattedValues {
  repeated VolatilityFormattedValue formatted_values = 1;
}

message VolatilitySection {
  optional VolatilityTable table = 1;
  optional VolatilityFormattedValues formatted_value_list = 2;
}

message VolatilityResponse {
  repeated VolatilitySection sections = 1;
  optional string plugin = 2;
  optional string error = 3;
}

// Requests and responses to allow for executing an arbitrary binary.
// This differs from ExecuteRequest as it includes sending the binary.
message ExecuteBinaryRequest {
  optional SignedBlob executable = 1;  // The binary that will be executed.
  optional string write_path = 2;  // Path to write the binary to.
  repeated string args = 3;
  // An execution time limit, given in seconds.
  optional int32 time_limit = 4;
}

message ExecuteBinaryResponse {
  optional int32 exit_status = 1;
  optional bytes stdout = 2;
  optional bytes stderr = 3;
  // The time used to execute the cmd, given in microseconds.
  optional int32 time_used = 4;
}

message InstallDriverRequest {
  optional SignedBlob driver = 1;
  optional string write_path = 2;     // Path to write the driver file to.
  optional uint32 force_reload = 3;   // Unload/Load if driver already loaded.

  // Windows specific options.
  optional string driver_name = 6;           // Drivers service name
  optional string driver_display_name = 7;   // Display name for driver.
  optional string device_path = 8;   // A path to the raw device.

  // Linux specific options.
  enum RewriteMode {
    DISABLE = 0;
    ENABLE = 1;
    FORCE = 2;
  }
  optional RewriteMode mode = 9 [default = ENABLE];
}

// This requests the client to encrypt a file and send it to a specified server.
message SendFileRequest {
  // The file to send.
  optional PathSpec pathspec = 1;
  // Connect to the receiver using IPv4 or IPv6.
  optional NetworkAddress.Family address_family = 2;
  // Receiving host.
  optional string host = 3;
  // Receiving port.
  optional uint32 port = 4;
  // Encryption key and iv for AES. Both have to be exactly 16 bytes.
  optional bytes key = 5;
  optional bytes iv = 6;
}

// Grep searches the content of files for a hit and returns several
// BufferReference.
message GrepSpec {
  // The target of this search.
  optional PathSpec target = 1 [(sem_type) = {
      description: "This file will be searched."
    }];

  // The search only covers this buffer.
  optional uint64 start_offset = 2 [default = 0];
  optional uint64 length = 3 [default = 10737418240];

  optional string regex = 4 [(sem_type) = {
      type: "RegularExpression",
      description: "The regular expression which will be used to search."
    }];

  // A literal search.
  optional bytes literal = 5;

  enum Mode {
    ALL_HITS = 0;   // Report all hits.
    FIRST_HIT = 1;  // Stop after one hit.
  }

  optional Mode mode = 6 [default = ALL_HITS];

  optional uint32 bytes_before = 7 [default = 10];
  optional uint32 bytes_after = 8 [default = 10];

  // These are used to encode the arguments / results.
  optional uint32 xor_in_key = 9 [default = 0];
  optional uint32 xor_out_key = 10 [default = 0];
}


// Requests and responses to allow a search for files that match all of these
// conditions.
message Find {
  optional Iterator iterator = 1;

  // The base path to recursive search from
  optional PathSpec pathspec = 2;

  optional string path_regex = 3 [(sem_type) = {
      type: "RegularExpression",
      description: "This matches the filename (not the directory name)."
    }];

  optional string data_regex = 4 [(sem_type) = {
      type: "RegularExpression",
      description: "This matches the content of the file."
    }];

  optional uint64 start_time = 5 [default = 0, (sem_type) = {
      type: "RDFDatetime",
      description: "File must be modified after this time."
    }];
  optional uint64 end_time = 6 [default = 9223372036854775807, (sem_type) = {
      type: "RDFDatetime",
      description: "File must be modified before this time (default=heat "
                   "death of the universe)."
    }];

  // Should we cross filesystems? Default is no.
  optional int32 cross_devs = 7 [default = 0];

  // How deep to search?
  optional int32 max_depth = 8 [ default = 15 ];

  optional StatEntry hit = 9 [(sem_type) = {
      description: "Responses come in this field."
    }];

  // The maximum amount of data from this file to search for data_regex.
  optional uint64 max_data = 10 [default = 1024000];

  optional uint64 min_file_size = 11 [default = 0, (sem_type) = {
      description: "Minimum file size in bytes."
    }];

  optional uint64 max_file_size = 12 [default = 9223372036854775807,
      (sem_type) = { description: "Maximum file size in bytes "
                                  "(default=sys.maxint)."
    }];

}

message PlistRequest {
  optional PathSpec pathspec = 1;
  optional string context = 2;
  optional string query = 3;
}

// The Foreman schedules flows based on these rules firing.
message ForemanAttributeRegex {
  // A relative path under the client which the attribute applies to
  optional string path = 1 [default = "/"];
  optional string attribute_name = 2;
  optional string attribute_regex = 3 [(sem_type) = {
      type: "RegularExpression",
      description: "If these are specified we fire when the attribute's str() "
      "representation matches the regex."
    }];
}

// This rule will fire if the expression operator(attribute, value) is true.
message ForemanAttributeInteger {
  // A relative path under the client which the attribute applies to
  optional string path = 1 [default = "/"];
  optional string attribute_name = 2;
  enum Operator {
    EQUAL = 0;
    LESS_THAN = 1;
    GREATER_THAN = 2;
  }
  optional Operator operator = 3 [default = EQUAL];
  optional uint64 value = 4;
}

// This action happens when the rule fires
message ForemanRuleAction {
  optional string flow_name = 1;
  optional Dict argv = 2;

  optional string hunt_name = 3;
  // Hunt session id.
  optional string hunt_id = 4 [(sem_type) = {
      type: "SessionID",
      description: "The id of the hunt to start."
    }];
  optional uint32 client_limit = 5;
};

message HuntError {
  optional string client_id = 1 [(sem_type) = {
      type: "ClientURN"
    }];
  optional string log_message = 2;
  optional string backtrace = 3;
}

message HuntLog {
  optional string client_id = 1 [(sem_type) = {
      type: "ClientURN"
    }];
  optional string log_message = 2;
  optional string urn = 3;
}

message ClientResources {
  optional string client_id = 1 [(sem_type) = {
      type: "ClientURN"
    }];
  optional string session_id = 2 [(sem_type) = {
      type: "SessionID"
    }];
  optional CpuSeconds cpu_usage = 3;
  optional uint64 network_bytes_sent = 4;
}

message StatsHistogram {
  repeated StatsHistogramBin bins = 3;
}

message StatsHistogramBin {
  optional float range_max_value = 1;
  optional uint64 num = 2;
}

message RunningStats {
  optional StatsHistogram histogram = 1;

  optional uint64 num = 2;
  optional double sum = 3;
  optional double sum_sq = 4;
}

message ClientResourcesStats {
  optional RunningStats user_cpu_stats = 1;
  optional RunningStats system_cpu_stats = 2;
  optional RunningStats network_bytes_sent_stats = 3;
  repeated ClientResources worst_performers = 4;
}

message ForemanRule {
  // We fire when all these rules match
  repeated ForemanAttributeRegex regex_rules = 1;
  repeated ForemanAttributeInteger integer_rules = 2;

  // These will all run in case this rule fires
  repeated ForemanRuleAction actions = 3;

  optional uint64 created = 4 [(sem_type) = {
      type: "RDFDatetime",
      description: "When this rule was created."
    }];
  optional uint64 expires = 5 [(sem_type) = {
      type: "RDFDatetime",
      description: "When this rule will expire."
    }];

  // A Human readable description of what this is supposed to do
  optional string description = 6;
}

// An Iterator is an opaque object which is returned by the client for each
// iteration.
message Iterator {
  // This is an opaque generic place for the client to store its state.
  optional Dict client_state = 1;

  // The following specify how many responses to send away. First we skip some
  // responses and then send "number" responses. Note that skip is not supported
  // by all iterating Actions.
  optional uint32 skip = 2 [default = 0];
  optional uint32 number = 3 [default = 100];

  // When the iterator is complete, we this state should be set to FINISHED.
  enum State {
    RUNNING = 0;
    FINISHED = 1;
  };
  optional State state = 4 [ default = RUNNING ];
};

// FindAction returns these protobufs.
message IteratedStatResponse {
  optional StatEntry stat = 1;
  optional Iterator iterator = 2;
}

// A notification is used in the GUI to alert users that some operation is
// completed
message Notification {
  // The notification type - this is used to interpret the meaning of this
  // message. For example in the GUI this is used to choose the view which is
  // displayed when the notification is clicked on.
  optional string type = 1;
  optional string subject = 2 [(sem_type) = {
      type: "RDFURN",
      description: "The subject which this notification is about."
    }];

  optional string message = 3;
  optional string source = 4 [(sem_type) = {
      type: "RDFURN",
      description: "The user or service which generated this notification."
    }];

  optional uint64 timestamp = 5 [(sem_type) = {
      type: "RDFDatetime",
      description: "Time the notification was added."
    }];
}


// This is a way to serialize an arbitrary RDFValue.
message EmbeddedRDFValue {
  optional uint64 age = 1 [(sem_type) = {
      type: "RDFDatetime",
      description: "The age of this RDFValue."
    }];
  optional string name = 2;  // The type name of this RDFValue - used to
                             // retrieve the class for it.
  optional bytes data = 3;   // The serialized data of the RDFValue.
}


// This is a summary of an AFF4 object. It consists of the most important
// attributes of some common AFF4 objects. It is used to store a summary in AFF4
// collections for efficient searching and filtering - without needing to load
// all this information from the data store.
message AFF4ObjectSummary {
  // The TYPE attribute.
  optional string type = 1;
  optional string urn = 2 [(sem_type) = {
      type: "RDFURN",
      description: "The URN of this AFF4 object.",
    }];
  optional StatEntry stat = 3;
}




message EmptyMessage {
}

